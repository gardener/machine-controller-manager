// Code generated by go-swagger; DO NOT EDIT.

package size

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new size API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for size API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateSize creates a size if the given ID already exists a conflict is returned
*/
func (a *Client) CreateSize(params *CreateSizeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSizeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSize",
		Method:             "PUT",
		PathPattern:        "/v1/size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSizeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSizeCreated), nil

}

/*
DeleteSize deletes an size and returns the deleted entity
*/
func (a *Client) DeleteSize(params *DeleteSizeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSize",
		Method:             "DELETE",
		PathPattern:        "/v1/size/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSizeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSizeOK), nil

}

/*
FindSize gets size by id
*/
func (a *Client) FindSize(params *FindSizeParams, authInfo runtime.ClientAuthInfoWriter) (*FindSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findSize",
		Method:             "GET",
		PathPattern:        "/v1/size/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindSizeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FindSizeOK), nil

}

/*
FromHardware searches all sizes for one to match the given hardwarespecs if nothing is found a list of entries is returned which describe the constraint which did not match
*/
func (a *Client) FromHardware(params *FromHardwareParams, authInfo runtime.ClientAuthInfoWriter) (*FromHardwareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFromHardwareParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "fromHardware",
		Method:             "POST",
		PathPattern:        "/v1/size/from-hardware",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FromHardwareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FromHardwareOK), nil

}

/*
ListSizes gets all sizes
*/
func (a *Client) ListSizes(params *ListSizesParams, authInfo runtime.ClientAuthInfoWriter) (*ListSizesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSizesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSizes",
		Method:             "GET",
		PathPattern:        "/v1/size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSizesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSizesOK), nil

}

/*
UpdateSize updates a size if the size was changed since this one was read a conflict is returned
*/
func (a *Client) UpdateSize(params *UpdateSizeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSize",
		Method:             "POST",
		PathPattern:        "/v1/size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSizeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSizeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
