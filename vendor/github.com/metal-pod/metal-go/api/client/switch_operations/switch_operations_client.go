// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new switch operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for switch operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteSwitch deletes an switch and returns the deleted entity
*/
func (a *Client) DeleteSwitch(params *DeleteSwitchParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSwitchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSwitchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSwitch",
		Method:             "DELETE",
		PathPattern:        "/v1/switch/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSwitchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSwitchOK), nil

}

/*
FindSwitch gets switch by id
*/
func (a *Client) FindSwitch(params *FindSwitchParams, authInfo runtime.ClientAuthInfoWriter) (*FindSwitchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindSwitchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findSwitch",
		Method:             "GET",
		PathPattern:        "/v1/switch/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindSwitchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FindSwitchOK), nil

}

/*
ListSwitches gets all switches
*/
func (a *Client) ListSwitches(params *ListSwitchesParams, authInfo runtime.ClientAuthInfoWriter) (*ListSwitchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSwitchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSwitches",
		Method:             "GET",
		PathPattern:        "/v1/switch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSwitchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSwitchesOK), nil

}

/*
RegisterSwitch registers a switch
*/
func (a *Client) RegisterSwitch(params *RegisterSwitchParams, authInfo runtime.ClientAuthInfoWriter) (*RegisterSwitchOK, *RegisterSwitchCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterSwitchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "registerSwitch",
		Method:             "POST",
		PathPattern:        "/v1/switch/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterSwitchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RegisterSwitchOK:
		return value, nil, nil
	case *RegisterSwitchCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
