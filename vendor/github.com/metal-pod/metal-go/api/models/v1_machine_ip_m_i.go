// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1MachineIPMI The IPMI connection data
// swagger:model v1.MachineIPMI
type V1MachineIPMI struct {

	// address
	// Required: true
	Address *string `json:"address"`

	// fru
	// Required: true
	Fru *V1MachineFru `json:"fru"`

	// interface
	// Required: true
	Interface *string `json:"interface"`

	// mac
	// Required: true
	Mac *string `json:"mac"`

	// password
	// Required: true
	Password *string `json:"password"`

	// user
	// Required: true
	User *string `json:"user"`
}

// Validate validates this v1 machine IP m i
func (m *V1MachineIPMI) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFru(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MachineIPMI) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineIPMI) validateFru(formats strfmt.Registry) error {

	if err := validate.Required("fru", "body", m.Fru); err != nil {
		return err
	}

	if m.Fru != nil {
		if err := m.Fru.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fru")
			}
			return err
		}
	}

	return nil
}

func (m *V1MachineIPMI) validateInterface(formats strfmt.Registry) error {

	if err := validate.Required("interface", "body", m.Interface); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineIPMI) validateMac(formats strfmt.Registry) error {

	if err := validate.Required("mac", "body", m.Mac); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineIPMI) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineIPMI) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MachineIPMI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MachineIPMI) UnmarshalBinary(b []byte) error {
	var res V1MachineIPMI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
