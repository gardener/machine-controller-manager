// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1FirewallResponse v1 firewall response
// swagger:model v1.FirewallResponse
type V1FirewallResponse struct {

	// the allocation data of an allocated machine
	// Required: true
	Allocation *V1MachineAllocation `json:"allocation"`

	// the last changed timestamp of this entity
	// Required: true
	// Read Only: true
	// Format: date-time
	Changed strfmt.DateTime `json:"changed"`

	// the creation time of this entity
	// Required: true
	// Read Only: true
	// Format: date-time
	Created strfmt.DateTime `json:"created"`

	// a description for this entity
	Description string `json:"description,omitempty"`

	// recent events of this machine during provisioning
	// Required: true
	Events *V1MachineRecentProvisioningEvents `json:"events"`

	// the hardware of this machine
	// Required: true
	Hardware *V1MachineHardware `json:"hardware"`

	// the unique ID of this entity
	// Required: true
	// Unique: true
	ID *string `json:"id"`

	// the state of this chassis identify LED
	// Required: true
	Ledstate *V1ChassisIdentifyLEDState `json:"ledstate"`

	// the liveliness of this machine
	// Required: true
	Liveliness *string `json:"liveliness"`

	// a readable name for this entity
	Name string `json:"name,omitempty"`

	// the partition assigned to this machine
	// Required: true
	// Read Only: true
	Partition *V1PartitionResponse `json:"partition"`

	// the rack assigned to this machine
	// Required: true
	// Read Only: true
	Rackid string `json:"rackid"`

	// the size of this machine
	// Required: true
	// Read Only: true
	Size *V1SizeResponse `json:"size"`

	// the state of this machine
	// Required: true
	State *V1MachineState `json:"state"`

	// tags for this machine
	// Required: true
	Tags []string `json:"tags"`
}

// Validate validates this v1 firewall response
func (m *V1FirewallResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanged(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLedstate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLiveliness(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRackid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1FirewallResponse) validateAllocation(formats strfmt.Registry) error {

	if err := validate.Required("allocation", "body", m.Allocation); err != nil {
		return err
	}

	if m.Allocation != nil {
		if err := m.Allocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allocation")
			}
			return err
		}
	}

	return nil
}

func (m *V1FirewallResponse) validateChanged(formats strfmt.Registry) error {

	if err := validate.Required("changed", "body", strfmt.DateTime(m.Changed)); err != nil {
		return err
	}

	if err := validate.FormatOf("changed", "body", "date-time", m.Changed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1FirewallResponse) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", strfmt.DateTime(m.Created)); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1FirewallResponse) validateEvents(formats strfmt.Registry) error {

	if err := validate.Required("events", "body", m.Events); err != nil {
		return err
	}

	if m.Events != nil {
		if err := m.Events.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("events")
			}
			return err
		}
	}

	return nil
}

func (m *V1FirewallResponse) validateHardware(formats strfmt.Registry) error {

	if err := validate.Required("hardware", "body", m.Hardware); err != nil {
		return err
	}

	if m.Hardware != nil {
		if err := m.Hardware.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hardware")
			}
			return err
		}
	}

	return nil
}

func (m *V1FirewallResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *V1FirewallResponse) validateLedstate(formats strfmt.Registry) error {

	if err := validate.Required("ledstate", "body", m.Ledstate); err != nil {
		return err
	}

	if m.Ledstate != nil {
		if err := m.Ledstate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ledstate")
			}
			return err
		}
	}

	return nil
}

func (m *V1FirewallResponse) validateLiveliness(formats strfmt.Registry) error {

	if err := validate.Required("liveliness", "body", m.Liveliness); err != nil {
		return err
	}

	return nil
}

func (m *V1FirewallResponse) validatePartition(formats strfmt.Registry) error {

	if err := validate.Required("partition", "body", m.Partition); err != nil {
		return err
	}

	if m.Partition != nil {
		if err := m.Partition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partition")
			}
			return err
		}
	}

	return nil
}

func (m *V1FirewallResponse) validateRackid(formats strfmt.Registry) error {

	if err := validate.RequiredString("rackid", "body", string(m.Rackid)); err != nil {
		return err
	}

	return nil
}

func (m *V1FirewallResponse) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	if m.Size != nil {
		if err := m.Size.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("size")
			}
			return err
		}
	}

	return nil
}

func (m *V1FirewallResponse) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *V1FirewallResponse) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1FirewallResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1FirewallResponse) UnmarshalBinary(b []byte) error {
	var res V1FirewallResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
