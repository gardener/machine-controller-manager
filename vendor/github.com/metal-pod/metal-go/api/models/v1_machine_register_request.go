// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1MachineRegisterRequest v1 machine register request
// swagger:model v1.MachineRegisterRequest
type V1MachineRegisterRequest struct {

	// the hardware of this machine
	// Required: true
	Hardware *V1MachineHardwareExtended `json:"hardware"`

	// the ipmi access infos
	// Required: true
	IPMI *V1MachineIPMI `json:"ipmi"`

	// the partition id to register this machine with
	// Required: true
	Partitionid *string `json:"partitionid"`

	// the rack id where this machine is connected to
	// Required: true
	Rackid *string `json:"rackid"`

	// tags for this machine
	// Required: true
	Tags []string `json:"tags"`

	// the product uuid of the machine to register
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this v1 machine register request
func (m *V1MachineRegisterRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHardware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPMI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartitionid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRackid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MachineRegisterRequest) validateHardware(formats strfmt.Registry) error {

	if err := validate.Required("hardware", "body", m.Hardware); err != nil {
		return err
	}

	if m.Hardware != nil {
		if err := m.Hardware.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hardware")
			}
			return err
		}
	}

	return nil
}

func (m *V1MachineRegisterRequest) validateIPMI(formats strfmt.Registry) error {

	if err := validate.Required("ipmi", "body", m.IPMI); err != nil {
		return err
	}

	if m.IPMI != nil {
		if err := m.IPMI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipmi")
			}
			return err
		}
	}

	return nil
}

func (m *V1MachineRegisterRequest) validatePartitionid(formats strfmt.Registry) error {

	if err := validate.Required("partitionid", "body", m.Partitionid); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineRegisterRequest) validateRackid(formats strfmt.Registry) error {

	if err := validate.Required("rackid", "body", m.Rackid); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineRegisterRequest) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineRegisterRequest) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MachineRegisterRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MachineRegisterRequest) UnmarshalBinary(b []byte) error {
	var res V1MachineRegisterRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
