// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SizeConstraint a machine matches to a size in order to make them easier to categorize
// swagger:model v1.SizeConstraint
type V1SizeConstraint struct {

	// the maximum value of the constraint
	// Required: true
	Max *int64 `json:"max"`

	// the minimum value of the constraint
	// Required: true
	Min *int64 `json:"min"`

	// the type of the constraint
	// Required: true
	// Enum: [cores memory storage]
	Type *string `json:"type"`
}

// Validate validates this v1 size constraint
func (m *V1SizeConstraint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SizeConstraint) validateMax(formats strfmt.Registry) error {

	if err := validate.Required("max", "body", m.Max); err != nil {
		return err
	}

	return nil
}

func (m *V1SizeConstraint) validateMin(formats strfmt.Registry) error {

	if err := validate.Required("min", "body", m.Min); err != nil {
		return err
	}

	return nil
}

var v1SizeConstraintTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cores","memory","storage"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1SizeConstraintTypeTypePropEnum = append(v1SizeConstraintTypeTypePropEnum, v)
	}
}

const (

	// V1SizeConstraintTypeCores captures enum value "cores"
	V1SizeConstraintTypeCores string = "cores"

	// V1SizeConstraintTypeMemory captures enum value "memory"
	V1SizeConstraintTypeMemory string = "memory"

	// V1SizeConstraintTypeStorage captures enum value "storage"
	V1SizeConstraintTypeStorage string = "storage"
)

// prop value enum
func (m *V1SizeConstraint) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, v1SizeConstraintTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *V1SizeConstraint) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SizeConstraint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SizeConstraint) UnmarshalBinary(b []byte) error {
	var res V1SizeConstraint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
