// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1IPAllocateRequest v1 IP allocate request
// swagger:model v1.IPAllocateRequest
type V1IPAllocateRequest struct {

	// a description for this entity
	Description string `json:"description,omitempty"`

	// the machine id this ip should be associated with
	// Required: true
	Machineid *string `json:"machineid"`

	// a readable name for this entity
	Name string `json:"name,omitempty"`

	// the network this ip allocate request address belongs to
	// Required: true
	Networkid *string `json:"networkid"`

	// the project this ip address belongs to
	// Required: true
	Projectid *string `json:"projectid"`

	// free tags that you associate with this ip.
	// Required: true
	Tags []string `json:"tags"`

	// the ip type, ephemeral leads to automatic cleanup of the ip address, static will enable re-use of the ip at a later point in time
	// Required: true
	// Enum: [static ephemeral]
	Type *string `json:"type"`
}

// Validate validates this v1 IP allocate request
func (m *V1IPAllocateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMachineid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1IPAllocateRequest) validateMachineid(formats strfmt.Registry) error {

	if err := validate.Required("machineid", "body", m.Machineid); err != nil {
		return err
	}

	return nil
}

func (m *V1IPAllocateRequest) validateNetworkid(formats strfmt.Registry) error {

	if err := validate.Required("networkid", "body", m.Networkid); err != nil {
		return err
	}

	return nil
}

func (m *V1IPAllocateRequest) validateProjectid(formats strfmt.Registry) error {

	if err := validate.Required("projectid", "body", m.Projectid); err != nil {
		return err
	}

	return nil
}

func (m *V1IPAllocateRequest) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

var v1IpAllocateRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["static","ephemeral"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1IpAllocateRequestTypeTypePropEnum = append(v1IpAllocateRequestTypeTypePropEnum, v)
	}
}

const (

	// V1IPAllocateRequestTypeStatic captures enum value "static"
	V1IPAllocateRequestTypeStatic string = "static"

	// V1IPAllocateRequestTypeEphemeral captures enum value "ephemeral"
	V1IPAllocateRequestTypeEphemeral string = "ephemeral"
)

// prop value enum
func (m *V1IPAllocateRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, v1IpAllocateRequestTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *V1IPAllocateRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1IPAllocateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1IPAllocateRequest) UnmarshalBinary(b []byte) error {
	var res V1IPAllocateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
