// This file was automatically generated by lister-gen

package internalversion

import (
	machine "github.com/gardener/node-controller-manager/pkg/apis/machine"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OpenStackMachineClassLister helps list OpenStackMachineClasses.
type OpenStackMachineClassLister interface {
	// List lists all OpenStackMachineClasses in the indexer.
	List(selector labels.Selector) (ret []*machine.OpenStackMachineClass, err error)
	// Get retrieves the OpenStackMachineClass from the index for a given name.
	Get(name string) (*machine.OpenStackMachineClass, error)
	OpenStackMachineClassListerExpansion
}

// openStackMachineClassLister implements the OpenStackMachineClassLister interface.
type openStackMachineClassLister struct {
	indexer cache.Indexer
}

// NewOpenStackMachineClassLister returns a new OpenStackMachineClassLister.
func NewOpenStackMachineClassLister(indexer cache.Indexer) OpenStackMachineClassLister {
	return &openStackMachineClassLister{indexer: indexer}
}

// List lists all OpenStackMachineClasses in the indexer.
func (s *openStackMachineClassLister) List(selector labels.Selector) (ret []*machine.OpenStackMachineClass, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*machine.OpenStackMachineClass))
	})
	return ret, err
}

// Get retrieves the OpenStackMachineClass from the index for a given name.
func (s *openStackMachineClassLister) Get(name string) (*machine.OpenStackMachineClass, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(machine.Resource("openstackmachineclass"), name)
	}
	return obj.(*machine.OpenStackMachineClass), nil
}
