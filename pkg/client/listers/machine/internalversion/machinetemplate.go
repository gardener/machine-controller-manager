/*
Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package internalversion

import (
	machine "github.com/gardener/machine-controller-manager/pkg/apis/machine"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MachineTemplateLister helps list MachineTemplates.
// All objects returned here must be treated as read-only.
type MachineTemplateLister interface {
	// List lists all MachineTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*machine.MachineTemplate, err error)
	// MachineTemplates returns an object that can list and get MachineTemplates.
	MachineTemplates(namespace string) MachineTemplateNamespaceLister
	MachineTemplateListerExpansion
}

// machineTemplateLister implements the MachineTemplateLister interface.
type machineTemplateLister struct {
	indexer cache.Indexer
}

// NewMachineTemplateLister returns a new MachineTemplateLister.
func NewMachineTemplateLister(indexer cache.Indexer) MachineTemplateLister {
	return &machineTemplateLister{indexer: indexer}
}

// List lists all MachineTemplates in the indexer.
func (s *machineTemplateLister) List(selector labels.Selector) (ret []*machine.MachineTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*machine.MachineTemplate))
	})
	return ret, err
}

// MachineTemplates returns an object that can list and get MachineTemplates.
func (s *machineTemplateLister) MachineTemplates(namespace string) MachineTemplateNamespaceLister {
	return machineTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MachineTemplateNamespaceLister helps list and get MachineTemplates.
// All objects returned here must be treated as read-only.
type MachineTemplateNamespaceLister interface {
	// List lists all MachineTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*machine.MachineTemplate, err error)
	// Get retrieves the MachineTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*machine.MachineTemplate, error)
	MachineTemplateNamespaceListerExpansion
}

// machineTemplateNamespaceLister implements the MachineTemplateNamespaceLister
// interface.
type machineTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MachineTemplates in the indexer for a given namespace.
func (s machineTemplateNamespaceLister) List(selector labels.Selector) (ret []*machine.MachineTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*machine.MachineTemplate))
	})
	return ret, err
}

// Get retrieves the MachineTemplate from the indexer for a given namespace and name.
func (s machineTemplateNamespaceLister) Get(name string) (*machine.MachineTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(machine.Resource("machinetemplate"), name)
	}
	return obj.(*machine.MachineTemplate), nil
}
