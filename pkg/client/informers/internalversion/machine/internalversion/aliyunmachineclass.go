// This file was automatically generated by informer-gen

package internalversion

import (
	time "time"

	machine "github.com/gardener/machine-controller-manager/pkg/apis/machine"
	clientset_internalversion "github.com/gardener/machine-controller-manager/pkg/client/clientset/internalversion"
	internalinterfaces "github.com/gardener/machine-controller-manager/pkg/client/informers/internalversion/internalinterfaces"
	internalversion "github.com/gardener/machine-controller-manager/pkg/client/listers/machine/internalversion"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// AliyunMachineClassInformer provides access to a shared informer and lister for
// AliyunMachineClasses.
type AliyunMachineClassInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() internalversion.AliyunMachineClassLister
}

type aliyunMachineClassInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewAliyunMachineClassInformer constructs a new informer for AliyunMachineClass type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAliyunMachineClassInformer(client clientset_internalversion.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredAliyunMachineClassInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredAliyunMachineClassInformer constructs a new informer for AliyunMachineClass type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAliyunMachineClassInformer(client clientset_internalversion.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.Machine().AliyunMachineClasses(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.Machine().AliyunMachineClasses(namespace).Watch(options)
			},
		},
		&machine.AliyunMachineClass{},
		resyncPeriod,
		indexers,
	)
}

func (f *aliyunMachineClassInformer) defaultInformer(client clientset_internalversion.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredAliyunMachineClassInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *aliyunMachineClassInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&machine.AliyunMachineClass{}, f.defaultInformer)
}

func (f *aliyunMachineClassInformer) Lister() internalversion.AliyunMachineClassLister {
	return internalversion.NewAliyunMachineClassLister(f.Informer().GetIndexer())
}
